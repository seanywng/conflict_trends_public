----
title: "Initial exploratory data analysis of ACLED-UCDP conflict trends"
author: "Sean Ng"
date: "13 June 2024"
toc: true
toc-location: left
toc-depth: 4
format: 
  html:
    page-layout: full
    code-tools: true
    self-contained: true
    
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
                      fig.width = 9.5)

library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)
library(broom)
library(treemapify)
library(kableExtra)
library(readxl)
library(janitor)
library(tidytext)
library(ggrepel)
library(widyr)
library(DT)
library(ggraph)

`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())

show_col(viridis_pal(option = "plasma")(9))
viridis_pal(option = "plasma")(9)
```



# Data

```{r compressed data, message=FALSE}

country_list <- c("Afghanistan", "Bangladesh", "Bhutan", "Cambodia", 
                  "China", "Fiji", "Hong Kong", "India", "Indonesia", 
                  "Iran", "North Korea", "South Korea", "Laos", 
                  "Malaysia", "Maldives", "Mongolia", "Myanmar", 
                  "Nepal", "Pakistan", "Papua New Guinea", "Philippines", 
                  "Solomon Islands", "Sri Lanka", "Thailand", "Timor-Leste", 
                  "Vanuatu", "Vietnam")

actor_codes_acled <- tribble(
  ~actor_code, ~description, 
  1, "State Forces", 
  2, "Rebel Groups", 
  3, "Political Militias", 
  4, "Identity Militias", 
  5, "Rioters",
  6, "Protesters", 
  7, "Civilians", 
  8, "Other Forces"
)

interaction_codes_acled <- read_csv(here("data", "interaction_codes_acled.csv"))

acled_filtered <- readRDS(here("data", "acled_filtered.rds")) 

acled_png <- acled_filtered |> 
  filter(country == "Papua New Guinea")

population <- read_csv(here("data", "wdi_population_data.csv")) |> 
  slice(1:27) |> 
  janitor::clean_names() %>%
  mutate(across(matches("_yr"), ~ as.numeric(.))) %>%
  pivot_longer(cols = x2015_yr2015:x2023_yr2023, 
               names_to = "year", 
               values_to = "population") |> 
  mutate(year = str_sub(year, start = -4, end = -1), 
         year = as.integer(year)) |> 
  rename(country = country_name) |> 
  mutate(country = case_when(str_detect(country, "Korea, Rep.") ~ "South Korea",
                             str_detect(country, "Korea, Dem. People's Rep.") ~ "North Korea", 
                             str_detect(country, "Hong Kong SAR, China") ~ "Hong Kong", 
                             str_detect(country, "Iran, Islamic Rep.") ~ "Iran", 
                             str_detect(country, "Lao PDR") ~ "Laos", 
                             country == "Viet Nam" ~ "Vietnam", 
                             TRUE ~ country))

population_estimates <- crossing(country = population$country, year = 2014:2023) |> 
  left_join(population |> 
              select(year, country, population), 
            by = c("year", "country")) |> 
  group_by(country) %>% 
  fill(population, .direction = "updown") 

world_shape <- st_read(here("data", 
                            "world-administrative-boundaries", 
                            "world-administrative-boundaries.shp"), 
                       quiet = TRUE)

png_locations <- read_xlsx(here("data", "png_adminboundaries_tabulardata.xlsx"), 
                         sheet = "ADM3") |> 
  janitor::clean_names()

png_shape <- st_read(here("data", 
                          "png_adm_nso_20190508_shp", 
                          "png_admbnda_adm3_nso_20190508.shp")) |> 
  clean_names()

# country_iso3 <- world_shape |> distinct(name, iso3)

```




# Tracker




```{r}

tracker <- read_xlsx(here("data", "PNG Highlands Conflict Tracker.xlsx")) |> 
  janitor::clean_names() |> 
  select(-c(x40:x45), -x) |> 
  mutate(id = row_number()) %>%
  mutate(start_date = excel_numeric_to_date(as.numeric(as.character(start_date)), 
                                            date_system = "modern"), 
         end_date = excel_numeric_to_date(as.numeric(as.character(end_date)), 
                                          date_system = "modern")) |> 
  mutate(province = paste0(province, " Province"), 
         district = paste0(district, " District"), 
         llg = paste0(llg, " LLG")) |> 
  mutate(llg = case_when(
    llg == "Lower Wage Rural LLG" ~ "Lower Wage LLG", 
    llg == "Upper Wage Rural LLG" ~ "Upper Wage LLG", 
    llg == "Pori Rural LLG" ~ "Awi Pori Rural LLG",
    TRUE ~ llg), 
    district = ifelse(llg == "Hayapuga Rural LLG", 
                      "Tari Pori District", 
                      district)) |> 
  
  left_join(
    png_locations |> 
      filter(str_detect(adm1_en, "Hela|Southern Highlands")) %>%
      mutate_at(vars(adm2_en, adm3_en), 
                ~ str_replace_all(., "\\/", " ")) |> 
      distinct(adm1_en, adm1_pcode, adm2_en,adm2_pcode,
               adm3_en, adm3_pcode), 
    by = c("province" = "adm1_en", 
           "district" = "adm2_en", 
           "llg" = "adm3_en")
  ) |> 
  mutate_at(vars(total_dead, total_injured), ~ as.numeric(.)) |>
  replace_na(list(
    total_dead = 0, 
    total_injured = 0
  )) |> 
  mutate(total_casualties = total_dead + total_injured)

```

### Tracker map



```{r}

png_populated_highlands <- st_read(here("data", 
                              "hotosm_png_populated_places_points_shp", 
                              "hotosm_png_populated_places_points_shp.shp")) |> 
  st_set_crs(4326) |> 
  st_crop(xmin = 142, xmax = 145, ymin = -4.9, ymax = -7)


tracker |> 
  filter(start_date >= "2014-01-01") |> 
  right_join(
    png_shape |> 
      filter(adm1_en %in% c("Hela Province", 
                            "Southern Highlands Province")), 
    by = "adm3_pcode"
  ) |>
  st_as_sf() |> 
  ggplot() + 
  geom_sf(size = .1, fill = "grey95") + 
  geom_point(data = png_populated_highlands |> 
               st_as_sf() |> 
               mutate(
                 place = ifelse(place == "isolated_dwelling", 
                                "isolated dwelling", 
                                place), 
                 place = str_to_title(place),
                 place = fct_rev(fct_relevel(place,
                                     c("City", "Town", "Hamlet", "Village", "Isolated Dwelling")))),
             stat = "sf_coordinates",
             aes(geometry = geometry, 
                 colour = place), 
             alpha = .5, 
             pch = 16) + 
  scale_colour_manual(values = c("grey85", "grey65", "grey45", "grey25", "grey5"),
                      guide = guide_legend(override.aes = list(alpha = 1))) +
  # scale_color_manual(values = c("#810F7C", "#810F7C", "#8856A7", "#8C96C6","#9EBCDA","#BFD3E6"), 
  #                    guide = guide_legend(override.aes = list(alpha = 1))) + 
  scale_size_continuous(range = c(.5, 8)) + 
  geom_point(aes(x = x_lon, 
                 y = y_lat, 
                 size = total_casualties), 
             alpha = .5, 
             colour = "#810F7C") + 
  labs(
    colour = "Settlement", 
    size = "Casualties\nfrom\nincident", 
    x = "", 
    y = "", 
    title = "Conflict incidents and fatalities in Hela and Southern Highlands Provinces 2014-2023", 
    subtitle = "Source: UNDP Highlands Conflict Tracker and Humanitarian OpenStreetMap Team"
  ) +
  guides(size = guide_legend(order = 1), 
         colour = guide_legend(reverse = TRUE))

```

Conflict hotspots seem to mirror population, perhaps with some gaps in reporting in the northern part of Southern Highlands Province, around `143.6 -6`, 




### Actors 

```{r}

tracker_actors <- tracker |>
    mutate(people_groups_involved = 
           ifelse(people_groups_involved == "Egenda 1,2, and 3 and Pulim", 
                  "Egenda 1, Egenda 2 and Egenda 3 and Pulim",
                  people_groups_involved), 
         people_groups_involved = 
           str_replace_all(people_groups_involved, "Iriyarepa-Yala", "IriyarepaYala"), 
         people_groups_involved = 
           str_replace_all(people_groups_involved, "Wambia-Perepe", "WambiaPerepe")) |> 
  separate(people_groups_involved, remove = FALSE,
           sep = "\\,| and|\\&|\\-|\\/",
           into = paste0("actor", 1:10)) |> 
  pivot_longer(cols = actor1:actor10, 
               names_to = "ignore", 
               values_to = "actor") |> 
  filter(!is.na(actor)) |> 
  mutate(actor = str_trim(actor))|>
  mutate(
    actor = str_replace_all(actor, "Naliba None", "Nalipa None"),
    actor = case_when(
      actor == "Hone)" ~ "Hone", 
      str_detect(actor, "Hatani") ~ "Hatani", 
      str_detect(actor, "Iriyarepa") ~ "Iriyarepa", 
      str_detect(actor, ". Koma (ally of Kobia)") ~ "Koma (ally of Kobia)", 
      str_detect(actor, ". Koma") ~ "Koma", 
      str_detect(actor, "Pari supporting Nalipa None") ~ "Pari supporting Nalipa None", 
      str_detect(actor, "Yaka Maleya") ~ "Yaka Maleya", 
      actor == "Linabini" ~ "Linapini", 
      str_detect(actor, "a Parere") ~ "Toanda Parere", 
      str_detect(actor, "awali") ~ "Awali",
      actor == "ipu" ~ "Pandipu", 
      actor == "the Tesda Clan" ~ "Tesda", 
      str_detect(actor, "Tepua") ~ "Tepua", 
      TRUE ~ actor), 
    actor = str_trim(actor)) |> 
  mutate(
    actor_simple = 
      str_replace(actor, "Tribes|tribes|Clans|clans|tribe|Tribe|Clan|clan", ""), 
    actor_simple = str_replace(actor, " \\s*\\([^\\)]+\\)", "")
  ) |> 
  mutate(actor_simple = 
           case_when(
             str_detect(actor, "Aroma") ~ "Aroma", 
             actor == "Awi" ~ "Awi Tribes", 
             str_detect(actor, "Egenda") ~ "Egenda", 
             str_detect(actor, "Kikita") ~ "Kitita Tribes", 
             str_detect(actor, "Kopra") ~ "Kopra Clans", 
             str_detect(actor, "Nalipa") ~ "Nalipa", 
             str_detect(actor, "Halapura") ~ "Halapura", 
             str_detect(actor, "Hereb") ~ "Hereb", 
             str_detect(actor, "Honaka") ~ "Honaka", 
             str_detect(actor, "Ingin") ~ "Ingin",
             str_detect(actor, "Kayaka") ~ "Kayaka", 
             str_detect(actor, "Kayumba") ~ "Kayumba",  
             str_detect(actor, "Koma") ~ "Koma", 
             str_detect(actor, "Pai") & actor != "Paitama" ~ "Pai",
             str_detect(actor, "Pei") ~ "Pei", 
             str_detect(actor, "Pujaro") ~ "Pujaro", 
             str_detect(actor, "Taguali") ~ "Taguali", 
             str_detect(actor, "Takima") ~ "Takima", 
             str_detect(actor, "Tambaruma") ~ "Tambaruma", 
             str_detect(actor, "Tobe") ~ "Tobe",
             str_detect(actor, "Toma") ~ "Toma",
             str_detect(actor, "P") & str_detect(people_groups_involved, "Pandipu") ~ "Pandipu", 
             
             TRUE ~ actor_simple
             
             )) |> 
  filter(actor != "a" & actor != "") |> 
  mutate(total_casualties = total_dead + total_injured)

```




### Highlands conflict tracker actors 

```{r}
tracker_actors  |> 
  filter(start_date >= "2014-01-01") |> 
  group_by(actor_simple) |> 
  summarise(events = n_distinct(id), 
            casualties = sum(total_casualties, na.rm = TRUE), 
            llgs = n_distinct(llg)) |> 
  mutate(label = ifelse(casualties > 7, actor_simple, "")) |> 
  ggplot(aes(x = events, y = casualties)) + 
  geom_jitter(aes(size = casualties, 
                  colour = llgs), 
             alpha = .5) + 
  geom_text_repel(aes(label = label), 
            hjust = 1, size = 2) + 
  scale_x_log10() + 
  scale_y_log10() +
  scale_colour_viridis_c(direction = -1, 
                         begin = .1, 
                         end = .9, 
                         breaks = c(1, 2, 3)) + 
  labs(title = "Events and casualties by conflict actor in Hela and Southern Highlands 2014-2023", 
       subtitle = "Size indicates number of casualties, colour the number of LLGs (admin3) the actor is present in") +
  theme(plot.subtitle = element_text(size = 8))

```

<br>

On the x-axis is the number of events each conflict actor has participated in over the past 10 years; on the y-axis is the total number of casualties (dead and injured) associated with their actions that have been recorded in the tracker, this is also reflected in the size of each point. The colour of each point indicates the number of LLGs (admin3) that each actor is active in. 

In the upper right of the plot, we see the more prolific (in violence) communal groups. There is some overlap here with ACLED. The Linapini were also identified as a conflict actor in the ACLED dataset. 

On the left-hand side, we see actors which have only one recorded incident, it is not currently understood how isolated these incidents are. 

Further analysis should include the types of incidents each conflict actor is most likely to engage in and from there, flesh out full profiles for each actor. 

There is much rich detail in the incidents reported in the Highlands Conflict Tracker: `r n_distinct(tracker_actors$actor_simple)` conflict actors have been recorded between 2014 and 2023. 

```{r}
tracker_actors |>
  filter(start_date >= "2014-01-01") |>
  group_by(actor) |> 
  summarise(llgs = n_distinct(llg), 
            event_count = n_distinct(id), 
            casualties = sum(total_casualties, na.rm = TRUE)) |> 
  arrange(desc(event_count)) |> 
  datatable()

```


Separate conflict actors into various columns, similar to ACLED.

```{r}
tracker |>
  mutate(people_groups_involved = 
           ifelse(people_groups_involved == "Egenda 1,2, and 3 and Pulim", 
                  "Egenda 1, Egenda 2 and Egenda 3 and Pulim",
                  people_groups_involved), 
         people_groups_involved = 
           str_replace_all(people_groups_involved, "Iriyarepa-Yala", "IriyarepaYala"), 
         people_groups_involved = 
           str_replace_all(people_groups_involved, "Wambia-Perepe", "WambiaPerepe")) |> 
  separate(people_groups_involved, remove = FALSE,
           sep = "\\,| and|\\&|\\-|\\/",
           into = paste0("actor", 1:10)) |> 
  unite(col = "assoc_actors", actor3:actor10, na.rm = TRUE, sep = "") |> 
  select(people_groups_involved, actor1, actor2, assoc_actors) %>% 
  mutate_at(vars(actor1, actor2, assoc_actors), 
                 ~ str_replace_all(., " \\s*\\([^\\)]+\\)", ""))


```



```{r}
tracker |> 
  filter(start_date >= "2014-01-01") |>
  count(incident_description, conflict_name) |> 
  unnest_tokens(word, conflict_name) |> 
  anti_join(stop_words, by = "word") |> 
  add_count(word) |> 
  arrange(desc(n)) |> 
  filter(str_detect(word, "[a-z]") & n > 1) |> 
  filter(word %out% c("fight", "conflict", "fights", "clans", "intertribal", "clan")) |> 
  group_by(incident_description) |> 
  mutate(no_actors = n_distinct(word)) |> 
  ungroup() |> 
  tidylo::bind_log_odds(incident_description, word, n) |> 
  filter(!is.infinite(log_odds_weighted)) |> 
  arrange(desc(log_odds_weighted)) |> 
  select(Incident_description = incident_description, 
         Actor = word, 
         No.Actors = no_actors,
         Events = n,
         Log_odds = log_odds_weighted
         ) |> 
  datatable(filter = list(position = "top", clear = FALSE), 
            options = list(pageLength = 10, scrollX = TRUE,
  #                         
  #                         ,
  #                                         initComplete = htmlwidgets::JS(
  #        "function(settings, json) {",
  #        paste0("$(this.api().table().container()).css({'font-size': '", "8.5pt", "'});"),
  #        "}")
       
  autoWidth = TRUE,
  columnDefs = list(list(width = '300px', targets = c(1))))) |> 
  formatRound(c("Log_odds"), digits = 3)
 
```

<br> 

The limitations of the analysis relate to the underlying data -- some conflicts are just too sparse in events to yield any analysis, especially if they were related to standalone events. 




```{r}

set.seed(224) 

tracker_actors |> 
  filter(start_date >= "2014-01-01") |>
  select(id, actor_simple, total_casualties) |>
  mutate(actor_simple = str_replace_all(actor_simple, " ", "")) |> 
  group_by(id) |> 
  mutate(actor_count = n_distinct(actor_simple)) |> 
  mutate(actors_string = paste0(actor_simple, collapse = " ")) |> 
  ungroup() |> 
  distinct(id, total_casualties, actor_count, actors_string) |> 
  unnest_tokens(word, actors_string) |> 
  add_count(word) |> 
  arrange(desc(n)) |> 
  filter(n > 1) |> 
  pairwise_cor(word, id, sort = TRUE) |>
  filter(correlation > .1) |> 
  igraph::graph_from_data_frame() |> 
  ggraph(layout = "fr") + 
  geom_edge_link(aes(alpha = correlation, 
                     edge_width = correlation), 
                 colour = "#F1605DFF", 
                 check_overlap = TRUE, 
                 alpha = .5) + 
  scale_alpha_continuous(range = c(0.1, 0.4)) +
  scale_edge_width_continuous(range = c(.2, 2)) + 
  geom_node_point(colour = "#F1605DFF", alpha = 0.2) +
  geom_node_text(aes(label = name), size = 3) + 
  theme(legend.position = "none") + 
  labs(title = "Relationships between PNG Highlands conflict actors 2014-2023", 
       subtitle = "Only actors that have been involved in more than one event")
 
```

<br>

Uncovering these relationships is also possible because the richness of the data collected. 
An easy next step to take is to classify these actors -- most seem to be communal militias or tribal groups 

Programmatically, monitoring these relationships and their triggers will help identify who the influence of communal militias can be weakened. Although admittedly, I am no expert on Highlands tribal groups and structures. 

Weaponry? Force strength?
Protection concerns as well 

Monitoring these most active conflict actors will also improve conflict monitoring in general. 


```{r}
tracker |> 
  filter(start_date >= "2014-01-01") |>
  count(people_groups_involved, conflict_name) |> 
  unnest_tokens(word, conflict_name) |> 
  anti_join(stop_words, by = "word") |> 
  add_count(word) |> 
  arrange(desc(n)) |> 
  filter(str_detect(word, "[a-z]") & n > 1) |> 
  filter(word %out% c("fight", "conflict", "fights", "clans", "intertribal", "clan")) |> 
  group_by(people_groups_involved) |> 
  mutate(no_actors = n_distinct(word)) |> 
  ungroup() |> 
  tidylo::bind_log_odds(people_groups_involved, word, n) |> 
  filter(!is.infinite(log_odds_weighted)) |> 
  mutate(people_groups_involved = str_to_lower(people_groups_involved))
```



```{r}
tracker |> 
  filter(start_date >= "2014-01-01") |>
  group_by(conflict_name) |> 
  summarise(count = n(), 
            casualties = sum(total_casualties, na.rm = TRUE)) |> 
  arrange(desc())

```


```{r}
tracker |>
  filter(start_date >= "2014-01-01" & start_date < "2024-01-01") |> 
  group_by(incident_description) |> 
  summarise(event_count = n(), 
            casualties = sum(total_casualties, na.rm = TRUE)) |>
  mutate(incident_description = fct_reorder(incident_description,
                                            casualties)) |> 
  ggplot(aes(x = casualties,
             y = incident_description)) + 
  geom_col(aes(fill = event_count)) + 
  geom_text(aes(label = casualties), 
            hjust = "inward", 
            size = 3, 
            colour = "grey30") +
  scale_fill_viridis_c(option = "magma", direction = -1, 
                       begin = .2, 
                       end = .9) + 
  labs(title = "Incidents by total casualties (dead and injured) 2014-2023", 
       subtitle = "Source: PNG Highlands Conflict Tracker", 
       y = "",
       x = "Casualties", 
       fill = "Event\ncount")
```


Probably need to relook at cadastral maps 
dispute resolution? Make all parties aware of all options prior to escalating to violence, 
Supporting national land reform,
Arbitration? 

The next set of conflict factors are related to crime and poverty -- the theft of pigs, money or valuables. 
Theft usually resolved with developmental and economic programmes

`clan` and `allegiance` also indicate communal tensions. 

Complementarity of the ACLED and the tracker datasets? 

It was election violence that drew ACLED's attention to Papua New Guinea and had them start to record conflict incidents. However, election violence is actually quite sparse 





### Tracker line graph

```{r}
tracker |> 
  filter(start_date >= "2014-01-01") |> 
  mutate(year = year(start_date), 
         total_casualties = total_dead + total_injured) |> 
  group_by(year) |> 
  summarise(events = n_distinct(id), 
            total_casualties = sum(total_casualties, na.rm = TRUE)) |> 
  ggplot(aes(x = year)) + 
  geom_line(aes(y = events), 
            colour = "#0D0887FF", 
            size = .7, a.pha = .8) + 
  geom_line(aes(y = total_casualties / 10), 
            colour = "#F89441FF", 
            size = .7, a.pha = .8) + 
  scale_y_continuous(
    name = "Count of events",
    sec.axis = sec_axis(~ . * 10, name = "Total casualties")
  ) + 
  scale_x_continuous(breaks = seq(2014, 2023, 1)) +
  scale_colour_manual(values = c("Event count" = "#0D0887FF", 
                                 "Casualties" = "#F89441FF")) + 
  labs(title = "Conflict events and total casualties in Hela and Southern Highlands", 
       subtitle = "2014-2023", 
       x = "") + 
  theme(axis.title.y.left = element_text(colour = "#0D0887FF"), 
        axis.title.y.right = element_text(colour = "#F89441FF"))

```

<br>

When did data collection stop? 


From the plot, we can see that there just aren't enough data points to conduct a meaningful comparison. 




```{r}
tracker_actors |> 
  filter(start_date >= "2021-01-01" & start_date < "2024-01-01") |>
  mutate(event_date_floor = floor_date(start_date, unit = "month")) |> 
  group_by(event_date_floor) |> 
  summarise(event_count = n()) |> 
  mutate(source = "highlands_tracker") |> 
  rbind(
    acled_png |> 
      filter(event_date  >= "2021-01-01" & event_date < "2024-01-01" & 
               admin1 %in% c("Hela", "Southern Highlands")) |> 
      mutate(event_date_floor = floor_date(event_date, unit = "month")) |>
      group_by(event_date_floor) |> 
      summarise(event_count = n()) |> 
      mutate(source = "acled")
  ) |> 
  ggplot(aes(x = event_date_floor, 
             y = event_count)) + 
  geom_line(aes(colour = source)) + 
  scale_x_date(date_breaks = "2 months", 
               date_labels = "%Y-%b") +
  theme(axis.text.x = element_text(angle = 30, 
                                   vjust = 1, 
                                   hjust = 1))

```



```{r}
acled_png |>
  filter(
    event_date  >= "2021-01-01" & event_date < "2024-01-01" &
      admin1 %in% c("Hela", "Southern Highlands")) |> 
  count(sub_event_type, sort = TRUE)

```

### Conflicts

```{r}
tracker |> 
  filter(conflict_no == 46)
```


```{r}
conflict_names <- tracker |> 
  mutate(conflict_name = str_trim(conflict_name), 
         start_date = ymd(start_date), 
         end_date = ymd(end_date)) |>
  group_by(conflict_name) |> 
  mutate(start_min = as.Date(min(start_date)),
         start_max = as.Date(max(start_date)),
         end_max = as.Date(max(end_date))) |> 
  summarise(start_min = as.Date(min(start_min)), 
            start_max = as.Date(max(start_max)), 
            end_max = max(end_max)) |> 
  mutate(end_max = as.Date(ifelse(is.na(end_max), start_max, end_max)), 
         duration = abs(difftime(start_min, end_max, units = c("days")))) |> 
  mutate(single_incident = ifelse(duration == 0, "no", "yes"))


typeof(conflict_names$duration)
```

```{r}
tracker |> filter(conflict_name == "Aguiba- Nalipa Conflict")
```



# ACLED


Thoughts on complementarity: 
ACLED seems to be much more macro in focus and covers a lot of political and state violence, which the Conflict Tracker is too micro to collect. The conflict tracker needs be supplemented with incident monitoring data -- perhaps reach out to UNDSS for this. But they also might not have coverage in the Highlands. 



Coding of events -- I would start with ACLED's codebook as a base, and introduce new categories as needed. But I still think that instead of calling them event triggers would be more apt that incident descriptions. 

```{r}
acled_filtered |> filter(country == "Cambodia" | 
                           country == "Papua New Guinea") |>
  filter(event_date >= "2021-01-01" & event_date < "2024-01-01") |> 
  mutate(event_date_floor = floor_date(event_date, unit = "month")) |> 
  group_by(event_date_floor, country) |> 
  summarise(count = n()) |> 
  ggplot(aes(x = event_date_floor, 
             y = count)) +
  geom_line(aes(colour = country), 
            size = .7) + 
  scale_colour_manual(values = c("#440154FF", "#35B779FF")) + 
  facet_wrap(~ country) + 
  labs(x = "date", 
       y = "Number of events", 
       title = "Comparing ACLED coverage for Papua New Guinea and Cambodia") + 
  theme(legend.position = "none", 
        strip.background = element_rect(fill = "black"))

```

<br>

Is Papua New Guinea getting more violent or is ACLED's coverage improving? But let's also bear in mind that this is only three years of data. 
This is ACLED

```{r}
acled_png |> 
  filter(admin1 %in% c("Hela", "Southern Highlands")) |> 
  mutate(admin1 = paste0(admin1, " Province")) |> 
  mutate(event_date_floor = floor_date(event_date, unit = "month")) |> 
  group_by(event_date_floor) |> 
  summarise(count = n()) |> 
  ggplot(aes(x = event_date_floor, 
             y = count)) +
  geom_line()
```





Who are the most common actors in ACLED? 
The conflict tracker seems to be largely devoid of state actors? Indicating very weak state control?

It would be excellent if we could have the full text description of each incident. This would allow for much richer analysis of the data. For instance, this is these are the `notes` recorded in just one of ACLED's conflict events: 

```{r}
acled_png |> 
  filter(event_id_cnty == "PNG759") |> pull(notes)
```

Let's also take the opportunity to match the actor names in the ACLED dataset against the ones in the Conflict Tracker. 


```{r}
acled_png |> 
  filter(admin1 %in% c("Hela", "Southern Highlands")) |> 
  pivot_longer(cols = c(actor1, actor2), 
               names_to = "ignore", 
               values_to = "actor") |> 
  filter(!is.na(actor)) |> 
  select(-ignore) |> 
  count(actor, sort = TRUE)
```

I think we should match the names in the conflict tracker against ACLED. 

```{r}
acled_png |> 
  filter(admin1 %in% c("Hela", "Southern Highlands")) |> 
  mutate(admin1 = paste0(admin1, " Province")) |> 
  group_by(event_type, year) |> 
  summarise(events = n(), 
            fatalities = sum(fatalities, na.rm = TRUE))

acled_png |> 
  filter(str_detect(actor1, "Linabini") | str_detect(actor2, "Linabini"))
  
```


```{r}
acled_png |> 
  filter(admin1 %in% c("Hela", "Southern Highlands")) |> 
  mutate(admin1 = paste0(admin1, " Province")) |> 
  mutate(event_date_floor = floor_date(event_date, unit = "month")) |> 
  group_by(event_date_floor) |> 
  summarise(count = n()) |> 
  ggplot(aes(x = event_date_floor, 
             y = count)) +
  geom_line()

```


```{r}

acled_png |> 
  filter(admin1 %in% c("Hela", "Southern Highlands")) |> 
  mutate(admin1 = paste0(admin1, " Province")) |>   
  select(event_id_cnty, notes) %>% 
  unnest_tokens(word, notes) %>% 
  add_count(word) |> 
  anti_join(stop_words, by = "word") %>% 
  filter(str_detect(word, "[a-z]")) %>%
  filter(word %out% c("southern", "highlands", "hela", "coded")) |> 
  group_by(word, event_id_cnty) |> 
  summarise(count = mean(n, na.rm = TRUE))
  left_join(
    acled_png |> 
      select(event_id_cnty,
             notes,
             fatalities), 
    by = "event_id_cnty"
  ) |> 
  arrange(desc(n))


```

